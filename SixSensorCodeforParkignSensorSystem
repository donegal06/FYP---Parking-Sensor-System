// defines pins numbers
const int trigPin2 = 2;
const int echoPin3 = 3;
const int trigPin4 = 4;
const int echoPin5 = 5;
const int trigPin6 = 6;
const int echoPin7 = 7;
const int trigPin8 = 8;
const int echoPin9 = 9;
const int trigPin10 = 10;
const int echoPin11 = 11;
const int trigPin12 = 12;
const int echoPin13 = 13;

#define IN1 30
#define IN2 32
#define IN3 34
#define IN4 36
#define IN5 38
#define IN6 40


// defines variables for
float distanceOne = 0;
float distanceTwo = 0;
float distanceThree = 0;
float distanceFour = 0;
float distanceFive = 0;
float distanceSix = 0;

void setup() {
  // ONE
  pinMode(trigPin2, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin3, INPUT);   // Sets the echoPin as an Input

  // TWO
  pinMode(trigPin4, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin5, INPUT);   // Sets the echoPin as an Input

  // THREE
  pinMode(trigPin6, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin7, INPUT);   // Sets the echoPin as an Input

  // FOUR
  pinMode(trigPin8, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin9, INPUT);

  // FIVE
  pinMode(trigPin10, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin11, INPUT);   // Sets the echoPin as an Input

  // SIX
  pinMode(trigPin12, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin13, INPUT);

  // Sets buzzer pins as outputs
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(IN5, OUTPUT);
  pinMode(IN6, OUTPUT);
  Serial.begin(9600);  // Starts the serial communication
}

// Function to check distance against thresholds then sound buzzer for scope
void buzz(float dist, int buzzerPin) {
  if ((dist < 10) && (dist >= 0)) {
    digitalWrite(buzzerPin, HIGH);  // turn the LED on (HIGH is the voltage level)
  } else if ((dist < 50) && (dist > 10)) {
    digitalWrite(buzzerPin, HIGH);  // turn the LED on (HIGH is the voltage level)
    delay(10 * (dist - 10));
    digitalWrite(buzzerPin, LOW);  // turn the LED on (HIGH is the voltage level)
    delay(10 * (dist - 10));       // wait for a set time
  } else if ((dist > 51) && (dist < 100)) {
    digitalWrite(buzzerPin, HIGH);  // turn the LED on (HIGH is the voltage level)
    delay(10 * (dist - 50));
    digitalWrite(buzzerPin, LOW);  // turn the LED on (HIGH is the voltage level)
    delay(10 * (dist - 50));       // wait for a set time
  } else if ((dist > 151) && (dist < 200)) {
    digitalWrite(buzzerPin, HIGH);  // turn the LED on (HIGH is the voltage level)
    delay(1000);
    digitalWrite(buzzerPin, LOW);  // turn the LED on (HIGH is the voltage level)
    delay(1000);
  } else if ((dist > 201) && (dist < 300)) {
    digitalWrite(buzzerPin, HIGH);  // turn the LED on (HIGH is the voltage level)
    delay(1500);
    digitalWrite(buzzerPin, LOW);  // turn the LED on (HIGH is the voltage level)
    delay(1500);
  } else if (dist > 300) {
    digitalWrite(buzzerPin, LOW);
  }
  delayMicroseconds(20);
}

// Function to check the distance of a given sensor with pins passed as parameters
float checkDistance(int trig, int echo) {
  digitalWrite(trig, LOW);
  delay(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trig, HIGH);
  delay(10);
  digitalWrite(trig, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  float duration = pulseIn(echo, HIGH);
  // Calculates distance from duration using speed of sound
  float distance = duration / 29 / 2;

  return distance;
}

void loop() {
  delay(10);

  float distanceOne = checkDistance(trigPin2, echoPin3);
  float distanceTwo = checkDistance(trigPin4, echoPin5);
  float distanceThree = checkDistance(trigPin6, echoPin7);
  float distanceFour = checkDistance(trigPin8, echoPin9);
  float distanceFive = checkDistance(trigPin10, echoPin11);
  float distanceSix = checkDistance(trigPin12, echoPin13);

  float distanceArray[6] = { distanceOne, distanceTwo, distanceThree, distanceFour, distanceFive, distanceSix };

  float closestDistance = distanceOne;
  int closestNum = 0;

  for (int i = 0; i < 6; i++) {
    if (distanceArray[i] < closestDistance) {
      closestDistance = distanceArray[i];
      closestNum = i;
    }
  }

  Serial.print(closestDistance);
  Serial.print(" - ");
  Serial.println(closestNum + 1);

  switch (closestNum + 1) {
    case 1:
      {
        buzz(distanceOne, IN1);
        break;
      }
    case 2:
      {
        buzz(distanceTwo, IN2);
        break;
      }
    case 3:
      {
        buzz(distanceThree, IN3);
        break;
      }
    case 4:
      {
        buzz(distanceFour, IN4);
        break;
      }
    case 5:
      {
        buzz(distanceFive, IN5);
        break;
      }
    case 6:
      {
        buzz(distanceSix, IN6);
        break;
      }
  }
}
